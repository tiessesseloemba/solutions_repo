{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Introduction Technical setup Install Visual Studio Code from here Install folowing extensions in Visual Studio Code: Github Repositories (GitHub, Inc.) GitHub Copilot (GitHub Copilot) GitHub Actions (GitHub, Inc.) Python (Microsoft) Useful links Python Miniconda Documentation Google Colab How to use this repository Below are the steps you need to follow: Create a GitHub account if you don\u2019t have one. Fork this repository to your account. Enable the Issues tab: Go to the Settings tab and check the Issues option. Add your professor as a collaborator: Go to the Settings tab and add their GitHub username in the Collaborators section. Install python: Download Source Code & WWW GitHub repo WWW Where can I find the problems? Please visit the Mathematics Physics Lectures website. Physics Mathematics Discret Mathematics","title":"Introduction"},{"location":"#introduction","text":"","title":"Introduction"},{"location":"#technical-setup","text":"Install Visual Studio Code from here Install folowing extensions in Visual Studio Code: Github Repositories (GitHub, Inc.) GitHub Copilot (GitHub Copilot) GitHub Actions (GitHub, Inc.) Python (Microsoft)","title":"Technical setup"},{"location":"#useful-links","text":"Python Miniconda Documentation Google Colab","title":"Useful links"},{"location":"#how-to-use-this-repository","text":"Below are the steps you need to follow: Create a GitHub account if you don\u2019t have one. Fork this repository to your account. Enable the Issues tab: Go to the Settings tab and check the Issues option. Add your professor as a collaborator: Go to the Settings tab and add their GitHub username in the Collaborators section. Install python: Download Source Code & WWW GitHub repo WWW","title":"How to use this repository"},{"location":"#where-can-i-find-the-problems","text":"Please visit the Mathematics Physics Lectures website. Physics Mathematics Discret Mathematics","title":"Where can I find the problems?"},{"location":"1%20Physics/1%20Mechanics/Problem_1/","text":"Problem 1 Investigating the Range as a Function of the Angle of Projection 1. Theoretical Foundation To begin, we must derive the basic equations of motion for projectile motion, assuming no air resistance and constant gravitational acceleration. Governing Equations of Motion: Projectile motion is governed by the kinematic equations in both the horizontal and vertical directions. The motion occurs in two dimensions horizontal (x) and vertical (y) and is subject to constant acceleration due to gravity in the vertical direction. We assume: The projectile is launched with an initial velocity \\(v_0\\) at an angle \\(\\theta\\) relative to the horizontal. The initial position of the projectile is at the origin: \\((x_0, y_0) = (0, 0)\\) . The acceleration due to gravity is \\(g\\) (which acts downward). In this setup, the motion of the projectile can be described by the following equations: Horizontal Motion (constant velocity since no acceleration in the x-direction): $$ x(t) = v_0 \\cos(\\theta) \\cdot t $$ Vertical Motion (accelerated motion due to gravity): $$ y(t) = v_0 \\sin(\\theta) \\cdot t - \\frac{1}{2} g t^2 $$ Here: \\(v_0\\) is the initial velocity, \\(\\theta\\) is the angle of projection, \\(g\\) is the acceleration due to gravity, and \\(t\\) is time. Time of Flight: The projectile will hit the ground when \\(y(t) = 0\\) . Setting the vertical motion equation equal to zero and solving for \\(t\\) , we get the time of flight: \\[ y(t) = v_0 \\sin(\\theta) \\cdot t - \\frac{1}{2} g t^2 = 0 \\] This is a quadratic equation in \\(t\\) , with solutions: \\[ t = 0 \\quad \\text{(at the launch point)} \\] \\[ t = \\frac{2 v_0 \\sin(\\theta)}{g} \\quad \\text{(time of flight)} \\] Range: The range \\(R\\) of the projectile is the horizontal distance traveled when it hits the ground, i.e., when \\(y(t) = 0\\) . Substituting the time of flight \\[t = \\frac{2 v_0 \\sin(\\theta)}{g}\\] into the horizontal motion equation: \\[ R = x(t) = v_0 \\cos(\\theta) \\cdot \\left( \\frac{2 v_0 \\sin(\\theta)}{g} \\right) \\] Simplifying: \\[ R = \\frac{v_0^2 \\sin(2\\theta)}{g} \\] Thus, the range \\(R\\) depends on the initial velocity \\(v_0\\) , gravitational acceleration \\(g\\) , and the launch angle \\(\\theta\\) . 2. Analysis of the Range From the derived equation for the range: \\[ R = \\frac{v_0^2 \\sin(2\\theta)}{g} \\] We can analyze how the range depends on the angle of projection \\(\\theta\\) . Angle Dependency: The term \\(\\sin(2\\theta)\\) indicates that the range is a function of the angle of projection. The sine function reaches its maximum value of 1 when \\(\\theta = 45^\\circ\\) . Therefore, the projectile achieves its maximum range when it is launched at an angle of 45 degrees. For angles less than 45\u00b0, the sine of \\(2\\theta\\) increases, but the range decreases as the angle approaches 0\u00b0 (horizontal launch). Conversely, for angles greater than 45\u00b0, \\(\\sin(2\\theta)\\) decreases as the angle approaches 90\u00b0 (vertical launch). Influence of Initial Velocity: The range is directly proportional to the square of the initial velocity, \\(v_0^2\\) . Therefore, increasing the initial velocity will result in a larger range, regardless of the angle. Influence of Gravitational Acceleration: The range is inversely proportional to the gravitational acceleration \\(g\\) . If \\(g\\) decreases (e.g., on a planet with lower gravity), the range will increase for the same initial velocity and launch angle. 3. Practical Applications Uneven Terrain: If the projectile is launched from a height \\(h\\) above the ground (e.g., a cliff), the range equation must be adjusted to account for this. The time of flight will be longer due to the higher launch position, and the equation for the vertical motion becomes: \\[ y(t) = v_0 \\sin(\\theta) \\cdot t - \\frac{1}{2} g t^2 + h \\] This leads to a more complex solution for the time of flight and range, but the overall approach remains similar. A numerical solution can be used to handle this situation. Air Resistance: Realistically, air resistance cannot be ignored, and its effect on the projectile\u2019s trajectory is significant at higher speeds. The equations of motion would need to incorporate drag forces, which are typically modeled as: \\[ F_{\\text{drag}} = \\frac{1}{2} C_d \\rho A v^2 \\] where: \\(C_d\\) is the drag coefficient, \\(\\rho\\) is the air density, \\(A\\) is the cross-sectional area of the projectile, and \\(v\\) is the velocity of the projectile. This makes the equations non-linear, requiring numerical methods to solve the trajectory and range. 4. Implementation To simulate projectile motion and visualize the range as a function of the angle of projection for different initial conditions, we can create a computational tool. Below is a simple Python code to calculate and plot the range as a function of launch angle for a given initial velocity. import numpy as np import matplotlib.pyplot as plt # Constants g = 9.81 # gravitational acceleration in m/s^2 v0 = 20 # initial velocity in m/s # Function to calculate the range def range_of_projectile(v0, theta, g): return (v0**2 * np.sin(2 * np.radians(theta))) / g # Angles of projection (0 to 90 degrees) angles = np.linspace(0, 90, 100) # Calculate range for each angle ranges = range_of_projectile(v0, angles, g) # Plotting the range as a function of angle plt.plot(angles, ranges) plt.title(f\"Range of a Projectile vs. Launch Angle\\nInitial Velocity: {v0} m/s\") plt.xlabel(\"Launch Angle (degrees)\") plt.ylabel(\"Range (meters)\") plt.grid(True) plt.show() Simulation1 Simulation2 Output and Interpretation: Running this code will generate a plot of the range as a function of launch angle for a given initial velocity. The curve will peak at 45 degrees, illustrating the theoretical result. This visualization provides insight into the optimal launch angle for maximum range. Conclusion By examining the range of a projectile as a function of the launch angle, we've seen how simple principles of physics can lead to rich and complex relationships. This analysis not only provides foundational understanding but also enables practical applications in diverse fields, from sports to engineering. Simulation tools like the one described can be further enhanced to incorporate more real-world complexities, such as air resistance and varying terrain.","title":"Problem 1"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#investigating-the-range-as-a-function-of-the-angle-of-projection","text":"","title":"Investigating the Range as a Function of the Angle of Projection"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#1-theoretical-foundation","text":"To begin, we must derive the basic equations of motion for projectile motion, assuming no air resistance and constant gravitational acceleration.","title":"1. Theoretical Foundation"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#governing-equations-of-motion","text":"Projectile motion is governed by the kinematic equations in both the horizontal and vertical directions. The motion occurs in two dimensions horizontal (x) and vertical (y) and is subject to constant acceleration due to gravity in the vertical direction. We assume: The projectile is launched with an initial velocity \\(v_0\\) at an angle \\(\\theta\\) relative to the horizontal. The initial position of the projectile is at the origin: \\((x_0, y_0) = (0, 0)\\) . The acceleration due to gravity is \\(g\\) (which acts downward). In this setup, the motion of the projectile can be described by the following equations: Horizontal Motion (constant velocity since no acceleration in the x-direction): $$ x(t) = v_0 \\cos(\\theta) \\cdot t $$ Vertical Motion (accelerated motion due to gravity): $$ y(t) = v_0 \\sin(\\theta) \\cdot t - \\frac{1}{2} g t^2 $$ Here: \\(v_0\\) is the initial velocity, \\(\\theta\\) is the angle of projection, \\(g\\) is the acceleration due to gravity, and \\(t\\) is time.","title":"Governing Equations of Motion:"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#time-of-flight","text":"The projectile will hit the ground when \\(y(t) = 0\\) . Setting the vertical motion equation equal to zero and solving for \\(t\\) , we get the time of flight: \\[ y(t) = v_0 \\sin(\\theta) \\cdot t - \\frac{1}{2} g t^2 = 0 \\] This is a quadratic equation in \\(t\\) , with solutions: \\[ t = 0 \\quad \\text{(at the launch point)} \\] \\[ t = \\frac{2 v_0 \\sin(\\theta)}{g} \\quad \\text{(time of flight)} \\]","title":"Time of Flight:"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#range","text":"The range \\(R\\) of the projectile is the horizontal distance traveled when it hits the ground, i.e., when \\(y(t) = 0\\) . Substituting the time of flight \\[t = \\frac{2 v_0 \\sin(\\theta)}{g}\\] into the horizontal motion equation: \\[ R = x(t) = v_0 \\cos(\\theta) \\cdot \\left( \\frac{2 v_0 \\sin(\\theta)}{g} \\right) \\] Simplifying: \\[ R = \\frac{v_0^2 \\sin(2\\theta)}{g} \\] Thus, the range \\(R\\) depends on the initial velocity \\(v_0\\) , gravitational acceleration \\(g\\) , and the launch angle \\(\\theta\\) .","title":"Range:"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#2-analysis-of-the-range","text":"From the derived equation for the range: \\[ R = \\frac{v_0^2 \\sin(2\\theta)}{g} \\] We can analyze how the range depends on the angle of projection \\(\\theta\\) .","title":"2. Analysis of the Range"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#angle-dependency","text":"The term \\(\\sin(2\\theta)\\) indicates that the range is a function of the angle of projection. The sine function reaches its maximum value of 1 when \\(\\theta = 45^\\circ\\) . Therefore, the projectile achieves its maximum range when it is launched at an angle of 45 degrees. For angles less than 45\u00b0, the sine of \\(2\\theta\\) increases, but the range decreases as the angle approaches 0\u00b0 (horizontal launch). Conversely, for angles greater than 45\u00b0, \\(\\sin(2\\theta)\\) decreases as the angle approaches 90\u00b0 (vertical launch).","title":"Angle Dependency:"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#influence-of-initial-velocity","text":"The range is directly proportional to the square of the initial velocity, \\(v_0^2\\) . Therefore, increasing the initial velocity will result in a larger range, regardless of the angle.","title":"Influence of Initial Velocity:"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#influence-of-gravitational-acceleration","text":"The range is inversely proportional to the gravitational acceleration \\(g\\) . If \\(g\\) decreases (e.g., on a planet with lower gravity), the range will increase for the same initial velocity and launch angle.","title":"Influence of Gravitational Acceleration:"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#3-practical-applications","text":"","title":"3. Practical Applications"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#uneven-terrain","text":"If the projectile is launched from a height \\(h\\) above the ground (e.g., a cliff), the range equation must be adjusted to account for this. The time of flight will be longer due to the higher launch position, and the equation for the vertical motion becomes: \\[ y(t) = v_0 \\sin(\\theta) \\cdot t - \\frac{1}{2} g t^2 + h \\] This leads to a more complex solution for the time of flight and range, but the overall approach remains similar. A numerical solution can be used to handle this situation.","title":"Uneven Terrain:"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#air-resistance","text":"Realistically, air resistance cannot be ignored, and its effect on the projectile\u2019s trajectory is significant at higher speeds. The equations of motion would need to incorporate drag forces, which are typically modeled as: \\[ F_{\\text{drag}} = \\frac{1}{2} C_d \\rho A v^2 \\] where: \\(C_d\\) is the drag coefficient, \\(\\rho\\) is the air density, \\(A\\) is the cross-sectional area of the projectile, and \\(v\\) is the velocity of the projectile. This makes the equations non-linear, requiring numerical methods to solve the trajectory and range.","title":"Air Resistance:"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#4-implementation","text":"To simulate projectile motion and visualize the range as a function of the angle of projection for different initial conditions, we can create a computational tool. Below is a simple Python code to calculate and plot the range as a function of launch angle for a given initial velocity. import numpy as np import matplotlib.pyplot as plt # Constants g = 9.81 # gravitational acceleration in m/s^2 v0 = 20 # initial velocity in m/s # Function to calculate the range def range_of_projectile(v0, theta, g): return (v0**2 * np.sin(2 * np.radians(theta))) / g # Angles of projection (0 to 90 degrees) angles = np.linspace(0, 90, 100) # Calculate range for each angle ranges = range_of_projectile(v0, angles, g) # Plotting the range as a function of angle plt.plot(angles, ranges) plt.title(f\"Range of a Projectile vs. Launch Angle\\nInitial Velocity: {v0} m/s\") plt.xlabel(\"Launch Angle (degrees)\") plt.ylabel(\"Range (meters)\") plt.grid(True) plt.show() Simulation1 Simulation2","title":"4. Implementation"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#output-and-interpretation","text":"Running this code will generate a plot of the range as a function of launch angle for a given initial velocity. The curve will peak at 45 degrees, illustrating the theoretical result. This visualization provides insight into the optimal launch angle for maximum range.","title":"Output and Interpretation:"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#conclusion","text":"By examining the range of a projectile as a function of the launch angle, we've seen how simple principles of physics can lead to rich and complex relationships. This analysis not only provides foundational understanding but also enables practical applications in diverse fields, from sports to engineering. Simulation tools like the one described can be further enhanced to incorporate more real-world complexities, such as air resistance and varying terrain.","title":"Conclusion"},{"location":"1%20Physics/1%20Mechanics/Problem_2/","text":"Problem 2 1. Theoretical Foundation Differential Equation The motion of a forced damped pendulum is governed by the following nonlinear second-order differential equation: \\[ \\frac{d^2\\theta}{dt^2} + b \\frac{d\\theta}{dt} + \\frac{g}{L} \\sin\\theta = F \\cos(\\omega t) \\] Where: \\(\\theta\\) = angular displacement (radians) \\(b\\) = damping coefficient (s\u207b\u00b9) \\(g\\) = gravitational acceleration (9.81 m/s\u00b2) \\(L\\) = pendulum length (m) \\(F\\) = amplitude of the external forcing (s\u207b\u00b2) \\(\\omega\\) = driving frequency (rad/s) \\(t\\) = time (s) This equation includes: Damping term: \\(b \\frac{d\\theta}{dt}\\) Restoring force (nonlinear): \\(\\frac{g}{L} \\sin\\theta\\) External forcing: \\(F \\cos(\\omega t)\\) Small-Angle Approximation For small angles ( \\(\\theta \\ll 1\\) ), \\(\\sin\\theta \\approx \\theta\\) , simplifying the equation to a linear forced damped oscillator: \\[ \\frac{d^2\\theta}{dt^2} + b \\frac{d\\theta}{dt} + \\omega_0^2 \\theta = F \\cos(\\omega t) \\] Where \\(\\omega_0 = \\sqrt{\\frac{g}{L}}\\) is the natural frequency. The general solution is the sum of the homogeneous and particular solutions: Homogeneous: \\[\\theta_h(t) = A e^{-\\frac{b}{2}t} \\cos(\\omega_r t + \\phi)\\] , where \\[\\omega_r = \\sqrt{\\omega_0^2 - \\left(\\frac{b}{2}\\right)^2}\\] Particular: \\[\\theta_p(t) = A_p \\cos(\\omega t - \\delta)\\] , where: \\[A_p = \\frac{F}{\\sqrt{(\\omega_0^2 - \\omega^2)^2 + (b\\omega)^2}}\\] \\[\\delta = \\tan^{-1}\\left(\\frac{b\\omega}{\\omega_0^2 - \\omega^2}\\right)\\] Resonance Conditions Resonance occurs when the driving frequency \\(\\omega\\) approaches the natural frequency \\(\\omega_0\\) . The amplitude \\(A_p\\) peaks when \\(\\omega = \\omega_r\\) , leading to maximum energy transfer from the driving force to the pendulum. For low damping, this is close to \\(\\omega_0\\) . This amplification is critical in systems where energy buildup is desired or must be avoided. 2. Analysis of Dynamics Parameter Influence Damping Coefficient ( \\(b\\) ) : Higher \\(b\\) reduces amplitude and prevents chaos by dissipating energy faster. Low \\(b\\) allows sustained oscillations or chaotic behavior. Driving Amplitude ( \\(F\\) ) : Small \\(F\\) leads to regular motion; large \\(F\\) can push the system into chaos by overcoming the restoring force. Driving Frequency ( \\(\\omega\\) ) : Near \\(\\omega_0\\) , resonance amplifies motion. Far from \\(\\omega_0\\) , motion may be quasiperiodic or chaotic depending on \\(F\\) and \\(b\\) . Transition to Chaos For small \\(F\\) and \\(b\\) , motion is periodic or quasiperiodic. As \\(F\\) increases, the nonlinear \\(\\sin\\theta\\) term dominates, leading to bifurcations and eventually chaos. Chaos is characterized by sensitivity to initial conditions, visible in phase space as a strange attractor. 3. Practical Applications Energy Harvesting : Piezoelectric devices use forced oscillations to convert mechanical energy to electrical energy. Suspension Bridges : External forces (wind) can drive oscillations; Tacoma Narrows Bridge collapse (1940) is a famous example of resonance gone wrong. Oscillating Circuits : LC circuits with external driving mimic pendulum dynamics, used in signal processing. 4. Implementation Here\u2019s a JavaScript simulation using HTML5 canvas to model and visualize the forced damped pendulum. It includes phase plots and allows parameter adjustment: Simulation <!DOCTYPE html> <html> <head> <title>Forced Damped Pendulum Simulator</title> <style> canvas { border: 1px solid black; } .controls { margin: 20px 0; } #container { display: flex; } </style> </head> <body> <div class=\"controls\"> <label>Damping (b): <input type=\"number\" id=\"damping\" value=\"0.2\" min=\"0\" max=\"2\" step=\"0.1\"></label> <label>Forcing Amp (F): <input type=\"number\" id=\"force\" value=\"1.2\" min=\"0\" max=\"5\" step=\"0.1\"></label> <label>Forcing Freq (\u03c9): <input type=\"number\" id=\"freq\" value=\"1.0\" min=\"0\" max=\"5\" step=\"0.1\"></label> <button onclick=\"startSimulation()\">Start</button> <button onclick=\"stopSimulation()\">Stop</button> </div> <div id=\"container\"> <canvas id=\"pendulumCanvas\" width=\"400\" height=\"400\"></canvas> <canvas id=\"phaseCanvas\" width=\"400\" height=\"400\"></canvas> </div> <script> const pendulumCanvas = document.getElementById('pendulumCanvas'); const phaseCanvas = document.getElementById('phaseCanvas'); const pCtx = pendulumCanvas.getContext('2d'); const phCtx = phaseCanvas.getContext('2d'); const g = 9.81, L = 1.0; const scale = 150; let theta = 0.1, omega = 0, t = 0; let animationFrameId = null; class Pendulum { constructor(b, F, omega_d) { this.b = b; this.F = F; this.omega_d = omega_d; } update(dt) { const d2theta = -g/L * Math.sin(theta) - this.b * omega + this.F * Math.cos(this.omega_d * t); omega += d2theta * dt; theta += omega * dt; t += dt; // Wrap theta to [-\u03c0, \u03c0] if (theta > Math.PI) theta -= 2 * Math.PI; if (theta < -Math.PI) theta += 2 * Math.PI; } } function drawPendulum(pendulum) { pCtx.clearRect(0, 0, pendulumCanvas.width, pendulumCanvas.height); pCtx.save(); pCtx.translate(200, 50); pCtx.beginPath(); pCtx.moveTo(0, 0); const x = scale * Math.sin(theta); const y = scale * Math.cos(theta); pCtx.lineTo(x, y); pCtx.stroke(); pCtx.beginPath(); pCtx.arc(x, y, 10, 0, 2 * Math.PI); pCtx.fillStyle = 'red'; pCtx.fill(); pCtx.restore(); } function drawPhase(pendulum) { const x = 200 + 100 * theta / Math.PI; const y = 200 + 50 * omega; phCtx.fillStyle = 'rgba(0, 0, 255, 0.1)'; phCtx.beginPath(); phCtx.arc(x, y, 1, 0, 2 * Math.PI); phCtx.fill(); } function startSimulation() { if (animationFrameId) cancelAnimationFrame(animationFrameId); const b = parseFloat(document.getElementById('damping').value); const F = parseFloat(document.getElementById('force').value); const omega_d = parseFloat(document.getElementById('freq').value); const pendulum = new Pendulum(b, F, omega_d); theta = 0.1; omega = 0; t = 0; phCtx.clearRect(0, 0, phaseCanvas.width, phaseCanvas.height); let lastTime = performance.now(); function animate(currentTime) { const dt = (currentTime - lastTime) / 1000; pendulum.update(dt); drawPendulum(pendulum); drawPhase(pendulum); lastTime = currentTime; animationFrameId = requestAnimationFrame(animate); } animationFrameId = requestAnimationFrame(animate); } function stopSimulation() { if (animationFrameId) cancelAnimationFrame(animationFrameId); animationFrameId = null; } // Initial draw const initialPendulum = new Pendulum(0.2, 1.2, 1.0); drawPendulum(initialPendulum); </script> </body> </html> Features Pendulum Visualization : Shows the pendulum swinging. Phase Plot : Displays \\(\\theta\\) vs. \\(\\omega\\) , revealing periodic, quasiperiodic, or chaotic behavior. Controls : Adjust damping ( \\(b\\) ), forcing amplitude ( \\(F\\) ), and frequency ( \\(\\omega\\) ). Numerical Integration : Uses simple Euler method (for simplicity; Runge-Kutta could be added for accuracy). Observations Try \\(b = 0.2\\) , \\(F = 0.5\\) , \\(\\omega = 1.0\\) for periodic motion. Increase \\(F = 1.5\\) or more for chaotic behavior (phase plot shows a strange attractor). Conclusion The forced damped pendulum serves as a powerful model for studying nonlinear dynamics, resonance, and chaos. Through analytical methods and computational simulations, we gain deeper insight into its behavior, with broad applications in engineering, physics, and applied mathematics.","title":"Problem 2"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#problem-2","text":"","title":"Problem 2"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#1-theoretical-foundation","text":"","title":"1. Theoretical Foundation"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#differential-equation","text":"The motion of a forced damped pendulum is governed by the following nonlinear second-order differential equation: \\[ \\frac{d^2\\theta}{dt^2} + b \\frac{d\\theta}{dt} + \\frac{g}{L} \\sin\\theta = F \\cos(\\omega t) \\] Where: \\(\\theta\\) = angular displacement (radians) \\(b\\) = damping coefficient (s\u207b\u00b9) \\(g\\) = gravitational acceleration (9.81 m/s\u00b2) \\(L\\) = pendulum length (m) \\(F\\) = amplitude of the external forcing (s\u207b\u00b2) \\(\\omega\\) = driving frequency (rad/s) \\(t\\) = time (s) This equation includes: Damping term: \\(b \\frac{d\\theta}{dt}\\) Restoring force (nonlinear): \\(\\frac{g}{L} \\sin\\theta\\) External forcing: \\(F \\cos(\\omega t)\\)","title":"Differential Equation"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#small-angle-approximation","text":"For small angles ( \\(\\theta \\ll 1\\) ), \\(\\sin\\theta \\approx \\theta\\) , simplifying the equation to a linear forced damped oscillator: \\[ \\frac{d^2\\theta}{dt^2} + b \\frac{d\\theta}{dt} + \\omega_0^2 \\theta = F \\cos(\\omega t) \\] Where \\(\\omega_0 = \\sqrt{\\frac{g}{L}}\\) is the natural frequency. The general solution is the sum of the homogeneous and particular solutions: Homogeneous: \\[\\theta_h(t) = A e^{-\\frac{b}{2}t} \\cos(\\omega_r t + \\phi)\\] , where \\[\\omega_r = \\sqrt{\\omega_0^2 - \\left(\\frac{b}{2}\\right)^2}\\] Particular: \\[\\theta_p(t) = A_p \\cos(\\omega t - \\delta)\\] , where: \\[A_p = \\frac{F}{\\sqrt{(\\omega_0^2 - \\omega^2)^2 + (b\\omega)^2}}\\] \\[\\delta = \\tan^{-1}\\left(\\frac{b\\omega}{\\omega_0^2 - \\omega^2}\\right)\\]","title":"Small-Angle Approximation"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#resonance-conditions","text":"Resonance occurs when the driving frequency \\(\\omega\\) approaches the natural frequency \\(\\omega_0\\) . The amplitude \\(A_p\\) peaks when \\(\\omega = \\omega_r\\) , leading to maximum energy transfer from the driving force to the pendulum. For low damping, this is close to \\(\\omega_0\\) . This amplification is critical in systems where energy buildup is desired or must be avoided.","title":"Resonance Conditions"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#2-analysis-of-dynamics","text":"","title":"2. Analysis of Dynamics"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#parameter-influence","text":"Damping Coefficient ( \\(b\\) ) : Higher \\(b\\) reduces amplitude and prevents chaos by dissipating energy faster. Low \\(b\\) allows sustained oscillations or chaotic behavior. Driving Amplitude ( \\(F\\) ) : Small \\(F\\) leads to regular motion; large \\(F\\) can push the system into chaos by overcoming the restoring force. Driving Frequency ( \\(\\omega\\) ) : Near \\(\\omega_0\\) , resonance amplifies motion. Far from \\(\\omega_0\\) , motion may be quasiperiodic or chaotic depending on \\(F\\) and \\(b\\) .","title":"Parameter Influence"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#transition-to-chaos","text":"For small \\(F\\) and \\(b\\) , motion is periodic or quasiperiodic. As \\(F\\) increases, the nonlinear \\(\\sin\\theta\\) term dominates, leading to bifurcations and eventually chaos. Chaos is characterized by sensitivity to initial conditions, visible in phase space as a strange attractor.","title":"Transition to Chaos"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#3-practical-applications","text":"Energy Harvesting : Piezoelectric devices use forced oscillations to convert mechanical energy to electrical energy. Suspension Bridges : External forces (wind) can drive oscillations; Tacoma Narrows Bridge collapse (1940) is a famous example of resonance gone wrong. Oscillating Circuits : LC circuits with external driving mimic pendulum dynamics, used in signal processing.","title":"3. Practical Applications"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#4-implementation","text":"Here\u2019s a JavaScript simulation using HTML5 canvas to model and visualize the forced damped pendulum. It includes phase plots and allows parameter adjustment: Simulation <!DOCTYPE html> <html> <head> <title>Forced Damped Pendulum Simulator</title> <style> canvas { border: 1px solid black; } .controls { margin: 20px 0; } #container { display: flex; } </style> </head> <body> <div class=\"controls\"> <label>Damping (b): <input type=\"number\" id=\"damping\" value=\"0.2\" min=\"0\" max=\"2\" step=\"0.1\"></label> <label>Forcing Amp (F): <input type=\"number\" id=\"force\" value=\"1.2\" min=\"0\" max=\"5\" step=\"0.1\"></label> <label>Forcing Freq (\u03c9): <input type=\"number\" id=\"freq\" value=\"1.0\" min=\"0\" max=\"5\" step=\"0.1\"></label> <button onclick=\"startSimulation()\">Start</button> <button onclick=\"stopSimulation()\">Stop</button> </div> <div id=\"container\"> <canvas id=\"pendulumCanvas\" width=\"400\" height=\"400\"></canvas> <canvas id=\"phaseCanvas\" width=\"400\" height=\"400\"></canvas> </div> <script> const pendulumCanvas = document.getElementById('pendulumCanvas'); const phaseCanvas = document.getElementById('phaseCanvas'); const pCtx = pendulumCanvas.getContext('2d'); const phCtx = phaseCanvas.getContext('2d'); const g = 9.81, L = 1.0; const scale = 150; let theta = 0.1, omega = 0, t = 0; let animationFrameId = null; class Pendulum { constructor(b, F, omega_d) { this.b = b; this.F = F; this.omega_d = omega_d; } update(dt) { const d2theta = -g/L * Math.sin(theta) - this.b * omega + this.F * Math.cos(this.omega_d * t); omega += d2theta * dt; theta += omega * dt; t += dt; // Wrap theta to [-\u03c0, \u03c0] if (theta > Math.PI) theta -= 2 * Math.PI; if (theta < -Math.PI) theta += 2 * Math.PI; } } function drawPendulum(pendulum) { pCtx.clearRect(0, 0, pendulumCanvas.width, pendulumCanvas.height); pCtx.save(); pCtx.translate(200, 50); pCtx.beginPath(); pCtx.moveTo(0, 0); const x = scale * Math.sin(theta); const y = scale * Math.cos(theta); pCtx.lineTo(x, y); pCtx.stroke(); pCtx.beginPath(); pCtx.arc(x, y, 10, 0, 2 * Math.PI); pCtx.fillStyle = 'red'; pCtx.fill(); pCtx.restore(); } function drawPhase(pendulum) { const x = 200 + 100 * theta / Math.PI; const y = 200 + 50 * omega; phCtx.fillStyle = 'rgba(0, 0, 255, 0.1)'; phCtx.beginPath(); phCtx.arc(x, y, 1, 0, 2 * Math.PI); phCtx.fill(); } function startSimulation() { if (animationFrameId) cancelAnimationFrame(animationFrameId); const b = parseFloat(document.getElementById('damping').value); const F = parseFloat(document.getElementById('force').value); const omega_d = parseFloat(document.getElementById('freq').value); const pendulum = new Pendulum(b, F, omega_d); theta = 0.1; omega = 0; t = 0; phCtx.clearRect(0, 0, phaseCanvas.width, phaseCanvas.height); let lastTime = performance.now(); function animate(currentTime) { const dt = (currentTime - lastTime) / 1000; pendulum.update(dt); drawPendulum(pendulum); drawPhase(pendulum); lastTime = currentTime; animationFrameId = requestAnimationFrame(animate); } animationFrameId = requestAnimationFrame(animate); } function stopSimulation() { if (animationFrameId) cancelAnimationFrame(animationFrameId); animationFrameId = null; } // Initial draw const initialPendulum = new Pendulum(0.2, 1.2, 1.0); drawPendulum(initialPendulum); </script> </body> </html>","title":"4. Implementation"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#features","text":"Pendulum Visualization : Shows the pendulum swinging. Phase Plot : Displays \\(\\theta\\) vs. \\(\\omega\\) , revealing periodic, quasiperiodic, or chaotic behavior. Controls : Adjust damping ( \\(b\\) ), forcing amplitude ( \\(F\\) ), and frequency ( \\(\\omega\\) ). Numerical Integration : Uses simple Euler method (for simplicity; Runge-Kutta could be added for accuracy).","title":"Features"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#observations","text":"Try \\(b = 0.2\\) , \\(F = 0.5\\) , \\(\\omega = 1.0\\) for periodic motion. Increase \\(F = 1.5\\) or more for chaotic behavior (phase plot shows a strange attractor). Conclusion The forced damped pendulum serves as a powerful model for studying nonlinear dynamics, resonance, and chaos. Through analytical methods and computational simulations, we gain deeper insight into its behavior, with broad applications in engineering, physics, and applied mathematics.","title":"Observations"},{"location":"1%20Physics/2%20Gravity/Problem_1/","text":"Problem 1 Orbital Period and Orbital Radius Motivation The relationship between the square of the orbital period and the cube of the orbital radius, known as Kepler's Third Law , is fundamental in celestial mechanics. This simple yet powerful law provides insights into planetary motion and gravitational interactions, from local satellite orbits to cosmic-scale phenomena. Understanding this law enables us to determine planetary masses, distances, and orbital characteristics. Theoretical Foundation Derivation of Kepler's Third Law for Circular Orbits Consider a planet or satellite of mass \\(m\\) orbiting a much larger mass \\(M\\) (e.g., a star or planet) in a circular orbit of radius \\(r\\) . The gravitational force provides the necessary centripetal force for circular motion: \\[ F_g = F_c \\] From Newton's Law of Gravitation: \\[ F_g = \\frac{GMm}{r^2} \\] From the centripetal force equation: \\[ F_c = \\frac{m v^2}{r} \\] Equating both forces: \\[ \\frac{GMm}{r^2} = \\frac{m v^2}{r} \\] Canceling \\(m\\) and solving for velocity: \\[ v^2 = \\frac{GM}{r} \\] Since orbital period \\(T\\) is given by \\(T = \\frac{2\\pi r}{v}\\) , substituting \\(v\\) : \\[ T^2 = \\frac{4\\pi^2 r^3}{GM} \\] This confirms Kepler's Third Law: \\[ T^2 \\propto r^3 \\] where the proportionality constant depends on the central mass \\(M\\) . Implications for Astronomy Calculating planetary masses : By measuring \\(T\\) and \\(r\\) , astronomers estimate the mass of celestial bodies. Satellite and planetary orbits : Used in designing stable satellite orbits around Earth. Extrasolar planets : Kepler\u2019s Law aids in identifying exoplanets through transit and radial velocity methods. Computational Model Below is a Python implementation to verify Kepler\u2019s Third Law for circular orbits: import numpy as np import matplotlib.pyplot as plt # Define gravitational constant and mass of central body (e.g., Sun in kg) G = 6.67430e-11 M = 1.989e30 # Mass of the Sun # Define a range of orbital radii (in meters) radii = np.linspace(1e10, 1e12, 100) # Compute orbital periods using Kepler's Third Law periods = np.sqrt((4 * np.pi**2 * radii**3) / (G * M)) # Convert periods to years periods_years = periods / (60 * 60 * 24 * 365.25) # Plot T^2 vs r^3 plt.figure(figsize=(8,6)) plt.plot(radii**3, periods_years**2, label=\"$T^2$ vs $r^3$\", color='b') plt.xlabel(\"Orbital Radius Cubed ($r^3$) [m^3]\") plt.ylabel(\"Orbital Period Squared ($T^2$) [years^2]\") plt.title(\"Verification of Kepler's Third Law\") plt.legend() plt.grid() plt.show() Discussion Graphical Representation : The linear plot of \\(T^2\\) vs. \\(r^3\\) confirms the expected proportionality. Extension to Elliptical Orbits : For non-circular orbits, Kepler's Law still holds using the semi-major axis \\(a\\) as the effective radius. Corrections for Non-Ideal Cases : Perturbations from other celestial bodies Relativistic effects for strong gravitational fields Simulation ### Interpretation of the Simulation This simulation visually demonstrates Kepler's Third Law , which states that the square of a planet's orbital period is proportional to the cube of its orbital radius. How the Simulation Works: A yellow Sun is fixed at the center. A blue planet orbits around the Sun in a circular trajectory. The slider allows you to adjust the orbital radius (the distance from the Sun). The planet moves slower in a larger orbit and faster in a smaller orbit, illustrating Kepler\u2019s law. Key Observations: As the orbit increases , the planet\u2019s speed decreases because a larger orbit requires a longer period to complete. The relationship between radius and speed follows the equation: $$ T^2 \\propto r^3 $$ This is the same principle used by astronomers to predict planetary motion, satellite orbits, and exoplanet detection . Conclusion Kepler's Third Law elegantly connects orbital mechanics with fundamental gravitational principles. This computational approach reinforces the relationship between the orbital period and radius, supporting its use in astronomy, satellite deployment, and astrophysical research.","title":"Problem 1"},{"location":"1%20Physics/2%20Gravity/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/2%20Gravity/Problem_1/#orbital-period-and-orbital-radius","text":"","title":"Orbital Period and Orbital Radius"},{"location":"1%20Physics/2%20Gravity/Problem_1/#motivation","text":"The relationship between the square of the orbital period and the cube of the orbital radius, known as Kepler's Third Law , is fundamental in celestial mechanics. This simple yet powerful law provides insights into planetary motion and gravitational interactions, from local satellite orbits to cosmic-scale phenomena. Understanding this law enables us to determine planetary masses, distances, and orbital characteristics.","title":"Motivation"},{"location":"1%20Physics/2%20Gravity/Problem_1/#theoretical-foundation","text":"","title":"Theoretical Foundation"},{"location":"1%20Physics/2%20Gravity/Problem_1/#derivation-of-keplers-third-law-for-circular-orbits","text":"Consider a planet or satellite of mass \\(m\\) orbiting a much larger mass \\(M\\) (e.g., a star or planet) in a circular orbit of radius \\(r\\) . The gravitational force provides the necessary centripetal force for circular motion: \\[ F_g = F_c \\] From Newton's Law of Gravitation: \\[ F_g = \\frac{GMm}{r^2} \\] From the centripetal force equation: \\[ F_c = \\frac{m v^2}{r} \\] Equating both forces: \\[ \\frac{GMm}{r^2} = \\frac{m v^2}{r} \\] Canceling \\(m\\) and solving for velocity: \\[ v^2 = \\frac{GM}{r} \\] Since orbital period \\(T\\) is given by \\(T = \\frac{2\\pi r}{v}\\) , substituting \\(v\\) : \\[ T^2 = \\frac{4\\pi^2 r^3}{GM} \\] This confirms Kepler's Third Law: \\[ T^2 \\propto r^3 \\] where the proportionality constant depends on the central mass \\(M\\) .","title":"Derivation of Kepler's Third Law for Circular Orbits"},{"location":"1%20Physics/2%20Gravity/Problem_1/#implications-for-astronomy","text":"Calculating planetary masses : By measuring \\(T\\) and \\(r\\) , astronomers estimate the mass of celestial bodies. Satellite and planetary orbits : Used in designing stable satellite orbits around Earth. Extrasolar planets : Kepler\u2019s Law aids in identifying exoplanets through transit and radial velocity methods.","title":"Implications for Astronomy"},{"location":"1%20Physics/2%20Gravity/Problem_1/#computational-model","text":"Below is a Python implementation to verify Kepler\u2019s Third Law for circular orbits: import numpy as np import matplotlib.pyplot as plt # Define gravitational constant and mass of central body (e.g., Sun in kg) G = 6.67430e-11 M = 1.989e30 # Mass of the Sun # Define a range of orbital radii (in meters) radii = np.linspace(1e10, 1e12, 100) # Compute orbital periods using Kepler's Third Law periods = np.sqrt((4 * np.pi**2 * radii**3) / (G * M)) # Convert periods to years periods_years = periods / (60 * 60 * 24 * 365.25) # Plot T^2 vs r^3 plt.figure(figsize=(8,6)) plt.plot(radii**3, periods_years**2, label=\"$T^2$ vs $r^3$\", color='b') plt.xlabel(\"Orbital Radius Cubed ($r^3$) [m^3]\") plt.ylabel(\"Orbital Period Squared ($T^2$) [years^2]\") plt.title(\"Verification of Kepler's Third Law\") plt.legend() plt.grid() plt.show()","title":"Computational Model"},{"location":"1%20Physics/2%20Gravity/Problem_1/#discussion","text":"Graphical Representation : The linear plot of \\(T^2\\) vs. \\(r^3\\) confirms the expected proportionality. Extension to Elliptical Orbits : For non-circular orbits, Kepler's Law still holds using the semi-major axis \\(a\\) as the effective radius. Corrections for Non-Ideal Cases : Perturbations from other celestial bodies Relativistic effects for strong gravitational fields Simulation ### Interpretation of the Simulation This simulation visually demonstrates Kepler's Third Law , which states that the square of a planet's orbital period is proportional to the cube of its orbital radius.","title":"Discussion"},{"location":"1%20Physics/2%20Gravity/Problem_1/#how-the-simulation-works","text":"A yellow Sun is fixed at the center. A blue planet orbits around the Sun in a circular trajectory. The slider allows you to adjust the orbital radius (the distance from the Sun). The planet moves slower in a larger orbit and faster in a smaller orbit, illustrating Kepler\u2019s law.","title":"How the Simulation Works:"},{"location":"1%20Physics/2%20Gravity/Problem_1/#key-observations","text":"As the orbit increases , the planet\u2019s speed decreases because a larger orbit requires a longer period to complete. The relationship between radius and speed follows the equation: $$ T^2 \\propto r^3 $$ This is the same principle used by astronomers to predict planetary motion, satellite orbits, and exoplanet detection .","title":"Key Observations:"},{"location":"1%20Physics/2%20Gravity/Problem_1/#conclusion","text":"Kepler's Third Law elegantly connects orbital mechanics with fundamental gravitational principles. This computational approach reinforces the relationship between the orbital period and radius, supporting its use in astronomy, satellite deployment, and astrophysical research.","title":"Conclusion"},{"location":"1%20Physics/2%20Gravity/Problem_2/","text":"Problem 2","title":"Problem 2"},{"location":"1%20Physics/2%20Gravity/Problem_2/#problem-2","text":"","title":"Problem 2"},{"location":"1%20Physics/2%20Gravity/Problem_3/","text":"Problem 3","title":"Problem 3"},{"location":"1%20Physics/2%20Gravity/Problem_3/#problem-3","text":"","title":"Problem 3"},{"location":"1%20Physics/3%20Waves/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/3%20Waves/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/4%20Electromagnetism/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/4%20Electromagnetism/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/5%20Circuits/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/5%20Circuits/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/6%20Statistics/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/6%20Statistics/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/6%20Statistics/Problem_2/","text":"Problem 2","title":"Problem 2"},{"location":"1%20Physics/6%20Statistics/Problem_2/#problem-2","text":"","title":"Problem 2"},{"location":"1%20Physics/7%20Measurements/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/7%20Measurements/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"2%20Mathematics/1%20Linear_algebra/","text":"Linear Algebra","title":"Linear Algebra"},{"location":"2%20Mathematics/1%20Linear_algebra/#linear-algebra","text":"","title":"Linear Algebra"},{"location":"2%20Mathematics/2%20Analytic_geometry/","text":"Analytic geometry","title":"Analytic geometry"},{"location":"2%20Mathematics/2%20Analytic_geometry/#analytic-geometry","text":"","title":"Analytic geometry"},{"location":"2%20Mathematics/3%20Calculus/","text":"Calculus","title":"Calculus"},{"location":"2%20Mathematics/3%20Calculus/#calculus","text":"","title":"Calculus"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_02%20Set_Theory/","text":"Set Theory","title":"Set Theory"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_02%20Set_Theory/#set-theory","text":"","title":"Set Theory"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_03%20Relations/","text":"Relations","title":"Relations"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_03%20Relations/#relations","text":"","title":"Relations"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_04%20Functions/","text":"Functions","title":"Functions"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_04%20Functions/#functions","text":"","title":"Functions"},{"location":"3%20Discret_Mathematics/2%20Number%20Theory%20and%20.../_05%20Combinatorics/","text":"Combinatorics","title":"Combinatorics"},{"location":"3%20Discret_Mathematics/2%20Number%20Theory%20and%20.../_05%20Combinatorics/#combinatorics","text":"","title":"Combinatorics"},{"location":"3%20Discret_Mathematics/2%20Number%20Theory%20and%20.../_08%20Number_Theory/","text":"Number Theory","title":"Number Theory"},{"location":"3%20Discret_Mathematics/2%20Number%20Theory%20and%20.../_08%20Number_Theory/#number-theory","text":"","title":"Number Theory"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_06%20Sequences_and_Series/","text":"Sequences and Series","title":"Sequences and Series"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_06%20Sequences_and_Series/#sequences-and-series","text":"","title":"Sequences and Series"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_07%20Induction/","text":"Induction","title":"Induction"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_07%20Induction/#induction","text":"","title":"Induction"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_09%20Recurrence/","text":"Recurrence","title":"Recurrence"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_09%20Recurrence/#recurrence","text":"","title":"Recurrence"},{"location":"3%20Discret_Mathematics/4%20Graph%20Theory%20and%20.../_10%20Graph_Theory/","text":"Graph Theory","title":"Graph Theory"},{"location":"3%20Discret_Mathematics/4%20Graph%20Theory%20and%20.../_10%20Graph_Theory/#graph-theory","text":"","title":"Graph Theory"},{"location":"3%20Discret_Mathematics/5%20Logic/_01%20Logic/","text":"Logic","title":"Logic"},{"location":"3%20Discret_Mathematics/5%20Logic/_01%20Logic/#logic","text":"","title":"Logic"}]}